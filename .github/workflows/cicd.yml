name: CI/CD Pipeline

on:
  push:
    branches:
      - test/cicd

env:
  FRONTEND_PATH: './frontend'
  BACKEND_PATH: './backend'
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Node.js 설정
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_PATH }}/package-lock.json

      - name: 캐시 설정
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.FRONTEND_PATH }}/node_modules
            ${{ env.FRONTEND_PATH }}/.next/cache
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: 의존성 설치
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npm ci

#      - name: 테스트 실행
#        working-directory: ${{ env.FRONTEND_PATH }}
#        run: npm test

      - name: Build
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npm run build

      - name: Node 빌드 저장
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_PATH }}/build
          retention-days: 1

  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: JDK 설정
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: gradle

      - name: Gradle 캐시
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('backend/**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

#      - name: 테스트 실행
#        working-directory: ${{ env.BACKEND_PATH }}
#        run: |
#          chmod +x ./gradlew
#          ./gradlew test

      - name: Spring boot Build
        working-directory: ${{ env.BACKEND_PATH }}
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: 빌드 저장
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: ${{ env.BACKEND_PATH }}/build/libs
          retention-days: 1

  deploy:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    steps:
      - name: Download builds
        uses: actions/download-artifact@v3
        with:
          path: builds

      - name: nginx config 변경 배포
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "config/nginx/nginx.conf"
          target: "/home/ubuntu/deploy/nginx.conf"

      - name: Nginx 설정 복사 및 재시작
        run: |
          ssh -i ${{ secrets.EC2_SSH_KEY }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          sleep 5  # 5초 대기
          sudo cp /home/ubuntu/deploy/nginx.conf /etc/nginx/conf.d/app.conf
          sudo nginx -t
          sudo systemctl restart nginx
          EOF

      - name: 배포시작
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "builds/*"
          target: "/home/ubuntu/deploy"
          strip_components: 1

      - name: jar 파일 재시작
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/deploy
            # 기존 프로세스 종료
            pkill -f '.jar' || true
            
            # 새 버전 실행
            nohup java -jar backend-build/*.jar > app.log 2>&1 &
            
            # 배포 로그 기록
            echo "Deployment completed at $(date)" >> deploy.log
